from functools import wraps

def type_logger(func):

    print(func)
    @wraps(func)
    def wrapper(*args):

        result = [f'{func.__name__}({i}:{type(i)})' for i in args]
        return result
    return wrapper


@type_logger
def calc_cube(x):
    """ 
    @param x: int
    @return: значение в кубе
    """
    return x ** 3


a = calc_cube(5, 9, 8.0, 'd')
print(*a)

#5: <class 'int'>

"""
Примечание: 
1. Если аргументов несколько - выводить данные о каждом через запятую;  - реализовано
2. Можете ли вы вывести тип значения функции? - реализовано
3. Сможете ли решить задачу для именованных аргументов? - не совсем понял как можно совместить именованные и неименованные аргументы. 
Возможно было бы сделать через **kwargs отдельно. Как все вместе запилить, я, к сожалению не понял.
4. Сможете ли вы замаскировать работу декоратора? - сделал через - @wraps(func), как было на лекции)
5. Сможете ли вывести имя функции, например, в виде - реализовано.

"""